{"version":3,"sources":["ToggleButton/ToggleButton.js","EntryContent/EntryContent.js","Entry/Entry.js","EntryContainer/EntryContainer.js","InputComponent/InputComponent.js","AppWrapper/AppWrapper.js","App/App.js","serviceWorker.js","index.js"],"names":["ToggleButton","props","checked","className","onClick","e","toggleHandler","idx","EntryContent","content","Entry","React","forwardRef","ref","isFirst","isLast","onTouchMove","entryMousemoveHandler","onMouseMove","entryToggleHandler","onMouseDown","entryMousedownHandler","onTouchStart","EntryContainer","Box","this","map","val","entryTouchcancelHandler","handlelEntryMouseup","key","length","bind","Component","InputComponent","minHeight","TextField","autoFocus","id","fullWidth","variant","placeholder","onChange","onChangeHandler","onKeyPress","onKeyPressHandler","AppWrapper","state","value","entryList","mouseDownIndex","mouseMoveIndex","ongoingTouches","handleEntryMousedown","handleEntryMousemove","handleEntryMouseup","handleEntryToggle","handleFieldInputChange","doSubmit","type","setState","changedTouches","forEach","elIdx","x","y","x1","y1","w","h","boundingRect","current","getBoundingClientRect","touches","pageX","pageY","left","top","width","height","temp","console","log","arguments","target","which","concat","createRef","Container","style","padding","maxWidth","onMouseUp","onTouchEnd","handelEntryMouseup","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","basename","process","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8626e357.chunk.js","sourcesContent":["import React from 'react';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nfunction ToggleButton(props) {\r\n    if (props.checked) {\r\n        return (\r\n            <div className={`ToggleButton\r\n                ${props.checked ? 'ToggleButton-checked' : ''}`}\r\n                onClick={(e) => props.toggleHandler(e,props.idx,props.checked)}>\r\n                    <CheckCircleOutlineIcon></CheckCircleOutlineIcon>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div className={`ToggleButton\r\n                ${props.checked ? 'ToggleButton-checked' : ''}`}\r\n                onClick={(e) => props.toggleHandler(e,props.idx,props.checked)}>\r\n                    <RadioButtonUncheckedIcon></RadioButtonUncheckedIcon>\r\n            </div>\r\n        );\r\n    }\r\n    // <div className={`ToggleButton\r\n    //     ${props.checked ? 'ToggleButton-checked' : ''}`}\r\n    //     onClick={(e) => props.toggleHandler(e,props.idx,props.checked)}></div>\r\n}\r\n\r\nexport default ToggleButton;","import React from 'react';\r\n\r\nfunction EntryContent(props) {\r\n    return (\r\n        <span className=\"EntryContent\">{props.content}</span>\r\n    );\r\n}\r\n\r\nexport default EntryContent;","import React from 'react';\r\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\r\nimport ToggleButton from '../ToggleButton/ToggleButton.js';\r\nimport EntryContent from '../EntryContent/EntryContent.js';\r\n\r\nconst Entry = React.forwardRef((props, ref) => (\r\n  <div className={`Entry noselect\r\n    ${props.isFirst ? 'Entry-first-in-list' : ''}\r\n    ${props.isLast ? 'Entry-last-in-list' : ''}\r\n    ${props.checked ? 'Entry-checked' : ''}`}\r\n\r\n    onTouchMove={(e) => props.entryMousemoveHandler(e,props.idx)}\r\n    onMouseMove={(e) => props.entryMousemoveHandler(e,props.idx)}\r\n    ref={ref}\r\n    >\r\n      <ToggleButton toggleHandler={props.entryToggleHandler} checked={props.checked} idx={props.idx}/>\r\n      <EntryContent content={props.content} />\r\n      <DragHandleIcon className=\"Entry-drag-handle\"\r\n        // onTouchStart={function(e) {e.stopPropagation();props.entryMousedownHandler(e,props.idx)}}\r\n        onMouseDown={(e) => props.entryMousedownHandler(e,props.idx)}\r\n        onTouchStart={(e) => props.entryMousedownHandler(e,props.idx)}\r\n        ></DragHandleIcon>\r\n  </div>\r\n));\r\n\r\nexport default Entry;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Entry from '../Entry/Entry.js';\r\n\r\n\r\nclass EntryContainer extends React.Component {\r\n    // constructor(props) {\r\n    //   super(props);\r\n    // }\r\n    render() {\r\n      return (\r\n        <Box className=\"EntryContainer\">\r\n          {this.props.content.map(function(val,idx) {\r\n            return (<Entry\r\n              entryMousedownHandler={this.props.entryMousedownHandler}\r\n              entryMousemoveHandler={this.props.entryMousemoveHandler}\r\n              entryTouchcancelHandler={this.handlelEntryMouseup}\r\n              entryToggleHandler={this.props.entryToggleHandler}\r\n              \r\n              content={val.content} checked={val.checked} idx={idx} key={idx} isFirst={idx===0} isLast={idx===this.props.content.length-1}\r\n              ref={val.ref}\r\n              ></Entry>);\r\n          }.bind(this))}\r\n        </Box>\r\n      )\r\n    }\r\n}\r\n  \r\nexport default EntryContainer;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nfunction InputComponent(props) {\r\n  return (\r\n    <Box className=\"InputComponent\" minHeight=\"50px\">\r\n      <TextField autoFocus id=\"outlined-basic\" fullWidth variant=\"outlined\" placeholder=\"New task\"\r\n        onChange={props.onChangeHandler}\r\n        onKeyPress={props.onKeyPressHandler}>\r\n      </TextField>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default InputComponent;","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport EntryContainer from '../EntryContainer/EntryContainer.js';\r\nimport InputComponent from '../InputComponent/InputComponent.js';\r\n\r\nfunction coordsInRect(x,y,x1,y1,w,h) {\r\n  let x2 = x1+w;\r\n  let y2 = y1+h;\r\n  return (\r\n    (x1 <= x && x2 >= x) &&\r\n    (y1 <= y && y2 >= y)\r\n  );\r\n}\r\n\r\nclass AppWrapper extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        value: '',\r\n        entryList: [],\r\n        mouseDownIndex: null,\r\n        mouseMoveIndex: null,\r\n        ongoingTouches: null\r\n      };\r\n      this.handleEntryMousedown = this.handleEntryMousedown.bind(this);\r\n      this.handleEntryMousemove = this.handleEntryMousemove.bind(this);\r\n      this.handleEntryMouseup = this.handleEntryMouseup.bind(this);\r\n      this.handleEntryToggle = this.handleEntryToggle.bind(this);\r\n      this.handleFieldInputChange = this.handleFieldInputChange.bind(this);\r\n\r\n      //Input\r\n      this.doSubmit = this.doSubmit.bind(this);\r\n    }\r\n\r\n\r\n    //Content Events\r\n    handleEntryMousedown(e,idx) {\r\n      if (e.type === \"touchstart\") {\r\n        this.setState({\r\n          ongoingTouches: e.changedTouches\r\n        });\r\n      }\r\n      // e.stopPropagation();\r\n      this.setState({\r\n        mouseDownIndex: idx,\r\n        // mouseOverIndex: idx\r\n      });\r\n    }\r\n\r\n    handleEntryMousemove(e,idx) {\r\n      //Due to the nature of touch events, the target of touchmove will only ever refer to the target of the preceding touchstart.\r\n      //If event is coming from a mobile context, redefine idx by computing target element based on touch position\r\n      if (e.type === \"touchmove\") {\r\n        //Iterate through each element and test if touch position is contained within its bounding rect.\r\n        this.state.entryList.forEach(function(val,elIdx) {\r\n          var boundingRect = val.ref.current.getBoundingClientRect();\r\n          if (coordsInRect(\r\n            e.touches[0].pageX,\r\n            e.touches[0].pageY,\r\n            boundingRect.left,\r\n            boundingRect.top,\r\n            boundingRect.width,\r\n            boundingRect.height)) {\r\n              //If touch is over an element, update idx to reflect this element.\r\n              idx = elIdx;\r\n            }\r\n        });\r\n      }\r\n      \r\n      var mouseDownIndex = this.state.mouseDownIndex;\r\n      if (mouseDownIndex !== null) {\r\n        if (idx !== mouseDownIndex) {\r\n          var temp = this.state.entryList;\r\n          [temp[mouseDownIndex], temp[idx]] = [temp[idx], temp[mouseDownIndex]];\r\n          this.setState({\r\n            entryList: temp,\r\n            mouseDownIndex: idx\r\n          });\r\n        }\r\n        else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    handleEntryMouseup(e) {\r\n      if (e.type===\"touchcancel\")\r\n        console.log(\"touch canceled\");\r\n      this.setState({\r\n        mouseDownIndex: null\r\n      });\r\n    }\r\n\r\n    \r\n    handleEntryToggle(e,idx,checked) {\r\n      console.log(arguments);\r\n      var temp = this.state.entryList;\r\n      console.log(checked);\r\n      temp[idx].checked = !checked;\r\n      this.setState({\r\n        entryList: temp\r\n      });\r\n    }\r\n  \r\n\r\n    //Input Events\r\n    handleFieldInputChange(e) {\r\n      this.setState({\r\n        value: e.target.value\r\n      });\r\n    }\r\n  \r\n    doSubmit(e) {\r\n      //Enter pressed\r\n      if (e.which === 13 && this.state.value !== '') {\r\n        this.setState({\r\n          entryList: this.state.entryList.concat({\r\n            content: this.state.value,\r\n            checked: false,\r\n            ref: React.createRef()\r\n          }),\r\n          value: ''\r\n        });\r\n        //Clear input\r\n        e.target.value = '';\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <Container className=\"AppWrapper\"  style={{padding: \"15px\"}} maxWidth=\"sm\"\r\n        // onTouchMove={this.handleEntryMousemove}\r\n        onMouseUp={this.handleEntryMouseup}\r\n        onTouchEnd={this.handleEntryMouseup}>\r\n        {/* <div > */}\r\n          <EntryContainer\r\n            entryMousedownHandler={this.handleEntryMousedown}\r\n            entryMousemoveHandler={this.handleEntryMousemove}\r\n            entryTouchcancelHandler={this.handelEntryMouseup}\r\n            // entryMouseupHandler={this.handleEntryMouseup}\r\n            entryToggleHandler={this.handleEntryToggle}\r\n            content={this.state.entryList}>\r\n          </EntryContainer>\r\n          <InputComponent\r\n            onChangeHandler={this.handleFieldInputChange}\r\n            onKeyPressHandler={this.doSubmit}>\r\n          </InputComponent>\r\n        {/* </div> */}\r\n          </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default AppWrapper;","import React from 'react';\r\nimport BrowserRouter from 'react-router-dom';\r\nimport AppWrapper from '../AppWrapper/AppWrapper.js';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppWrapper />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}